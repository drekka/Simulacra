//
//  Created by Derek Clarkson.
//

import Foundation
import Hummingbird
import HummingbirdFoundation
import HummingbirdMustache

#if os(macOS) || os(iOS)
    import Network
#endif

extension Error {
    var isPortTakenError: Bool {
        #if os(iOS)
            return self as? NWError == .posix(.EADDRINUSE)
        #else
            return (self as? IOError)?.errnoCode == POSIXErrorCode.EADDRINUSE.rawValue
        #endif
    }
}

/// The main Simulacra server.
public class Simulacra {

    private let server: HBApplication
    private let verbose: Bool
    private let graphQLInterceptor: GraphQLInterceptor

    public var url: URL {
        URL(string: "http://\(server.host):\(server.port)")!
    }

    public init(portRange: ClosedRange<Int> = 8080 ... 8090,
                graphQLPath: String = "/graphql",
                useAnyAddr: Bool = false,
                templatePath: URL? = nil,
                templateExtension: String = "json",
                filePaths: [URL]? = nil,
                verbose: Bool = false,
                hummingbirdVerbose: Bool = false,
                @EndpointBuilder endpoints: () -> [Endpoint] = { [] }) throws {

        self.verbose = verbose

        // Setup middleware. middleware must be added before starting the server or
        // the middleware will execute after Hummingbird's ``TrieRouter``.
        // This is due to the way hummingbird wires middleware and the router together.
        // Also note the order is important.
        graphQLInterceptor = GraphQLInterceptor(path: graphQLPath, verbose: verbose)
        let middleware: [HBMiddleware] = [
            RequestLogger(verbose: verbose),
            NoResponseFoundMiddleware(),
            AdminConsole(),
            graphQLInterceptor,
        ]

        // Validate the file paths.
        try filePaths?.forEach { // Directories to search for files when there is no matching endpoint.
            if $0.fileSystemStatus != .isDirectory  {
                throw SimulacraError.directoryNotExists($0.filePath)
            }
        }

        // Initiate the mustache template renderer if it's been set.
        let mustacheEngine: HBMustacheLibrary
        if let templatePath {
            mustacheEngine = try HBMustacheLibrary(directory: templatePath.path, withExtension: templateExtension)
        } else {
            mustacheEngine = HBMustacheLibrary()
        }


        for nextPort in portRange {

            do {
                server = try HBApplication.start(on: nextPort,
                                                 useAnyAddr: useAnyAddr,
                                                 middleware: middleware,
                                                 mustacheEngine: mustacheEngine,
                                                 filePaths: filePaths,
                                                 verbose: verbose,
                                                 hummingbirdVerbose: hummingbirdVerbose)

                // Add any passed endpoints.
                add(endpoints)

                return // Exit init.

            } catch {

                switch error {
                case _ where error.isPortTakenError:
                    print("ðŸ‘» Port \(nextPort) busy, trying next port in range")
                    continue

                case let error as SimulacraError:
                    print("ðŸ‘» Unexpected error: \(error.localizedDescription)")
                    throw error

                default:
                    print("ðŸ‘» Unexpected error: \(error.localizedDescription)")
                    throw SimulacraError.unexpectedError(error)
                }
            }
        }

        print("ðŸ‘» Exhausted all ports in range \(portRange)")
        throw SimulacraError.noPortAvailable
    }

    public func wait() {
        if verbose {
            print(#"ðŸ‘» CTRL+C or "curl -X "POST" \#(url.absoluteString)/\#(AdminConsole.adminRoot)/\#(AdminConsole.shutdown)" to shutdown."#)
            print(#"ðŸ‘» Have a nice day ðŸ™‚"#)
        } else {
            print(url.absoluteString)
        }
        server.wait()
    }

    // MARK: - Convenience registration

    /// Adds an array of endpoints generated by an ``EndpointBuilder``.
    ///
    /// - parameter endpoints: the generated closure that returns the endpoints to add.
    public func add(@EndpointBuilder _ endpoints: () -> [Endpoint]) {
        endpoints().forEach(add(_:))
    }

    /// Adds an array of endpoints.
    ///
    /// - parameter endpoints: An array of endpoints.
    public func add(_ endpoints: [Endpoint]) {
        endpoints.forEach(add(_:))
    }

    /// Adds the passed endpoint.
    ///
    /// - parameter endpoint: The end point to add.
    public func add(_ endpoint: Endpoint) {
        switch endpoint {
        case let endpoint as HTTPEndpoint:
                add(endpoint.method, endpoint.path, response: endpoint.response)
        case let endpoint as GraphQLEndpoint:
                add(endpoint.method, endpoint.selector, response: endpoint.response)
        default:
            break
        }
    }

    /// Convenient function for defining a HTTP endpoint directly.
    public func add(_ method: HTTPMethod, _ path: String, response handler: @escaping (HTTPRequest, Cache) async -> HTTPResponse) {
        add(method, path, response: .dynamic(handler))
    }

    /// Convenient function for defining a GraphQL endpoint directly.
    public func add(_ method: HTTPMethod, _ graphQLSelector: GraphQLSelector, response handler: @escaping (HTTPRequest, Cache) async -> HTTPResponse) {
        add(method, graphQLSelector, response: .dynamic(handler))
    }

    // MARK: - Core registration

    /// Adds a HTTP rest like endpoint.
    public func add(_ method: HTTPMethod, _ path: String, response: HTTPResponse = .ok()) {
        if verbose { print(#"ðŸ‘» Adding endpoint:\#(method) \#(path)"#) }
        server.router.add(method, path, response: response)
    }

    /// Adds a GraphQL endpoint.
    public func add(_ method: HTTPMethod, _ graphQLSelector: GraphQLSelector, response: HTTPResponse = .ok()) {
        if verbose { print(#"ðŸ‘» Adding GraphQL endpoint:\#(method)"#) }
    }

    // MARK: - Server functions

    public func stop() {
        server.stop()
    }
}

extension HBApplication {

    /// Configures and starts the server on the specified port or throws an error if that fails.
    static func start(on port: Int,
                      useAnyAddr: Bool,
                      middleware: [HBMiddleware],
                      mustacheEngine: HBMustacheLibrary,
                      filePaths: [URL]?,
                      verbose: Bool,
                      hummingbirdVerbose: Bool) throws -> HBApplication {

        let configuration = HBApplication.Configuration(
            address: .hostname(useAnyAddr ? "0.0.0.0" : "127.0.0.1", port: port),
            serverName: "Simulacra API simulator",
            logLevel: hummingbirdVerbose ? .trace : .error
        )

        let server = HBApplication(configuration: configuration)

        // Add middleware. This must be done before starting the server or
        // the middleware will execute after Hummingbird's ``TrieRouter``.
        // This is due to the way hummingbird wires middleware and the router together.
        // Also note the order is important.
        middleware.forEach(server.middleware.add(_:))

        // File path middleware requires a server reference so we cannot set them up in advance.
        filePaths?.map {HBFileMiddleware($0.filePath, application: server)}.forEach(server.middleware.add(_:))

        // Setup resources and engines.
        server.cache = InMemoryCache()
        server.mustacheRenderer = mustacheEngine

        try server.start()
        return server
    }
}
